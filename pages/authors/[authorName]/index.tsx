import Head from "next/head";
import { Inter } from "@next/font/google";
import Image from "next/image";
import Link from "next/link";

const inter = Inter({ subsets: ["latin"] });

export default function Home({ data, poems, authorName }: any) {
  console.log(data);
  return (
    <>
      <Head>
        <title>{authorName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-violet-200 m-20 p-10 rounded-xl lg:max-w-[50%]">
        <div className="flex gap-x-6 ">
          <div className="basis-1/3 ">
            {data.originalimage ? (
              <Image
                src={data.originalimage.source}
                alt={data.title}
                height={800}
                width={800}
                className="w-full rounded-xl"
              />
            ) : (
              <p>No Image</p>
            )}
            <h1 className={`${inter.className} font-semibold`}>{authorName}</h1>
          </div>
          <div className="basis-2/3">
            <p className="italic mb-4 font-semibold">{data.description}</p>
            <p className="text-xl text-slate-700">{data.extract}</p>
          </div>
        </div>
        {/* Poems */}
        <div className="mt-10">
          <h1 className="text-xl font-bold">Poems By The Author</h1>
          {poems.map((poem: any, i: number) => (
            <Link href={`${authorName}/${poem.title}`} key={i}>
              <p className={`${inter.className} font-semibold text-slate-700`}>
                {poem.title}
              </p>
            </Link>
          ))}
        </div>
      </main>
    </>
  );
}

export const getStaticPaths = async () => {
  let response = await fetch("https://poetrydb.org/author", {
    method: "GET",
  });
  let data = await response.json();

  let pathNames = data.authors.map((author: any) => {
    return {
      params: {
        authorName: author,
      },
    };
  });

  return {
    paths: pathNames,
    fallback: true,
  };
};

export const getStaticProps = async (context: any) => {
  let { params } = context;

  let authorName = "";
  if (params.authorName === "Ann Taylor") {
    authorName = "Ann Taylor (poet)";
  } else if (params.authorName === "Edward Fitzgerald") {
    authorName = "Edward FitzGerald (poet)";
  } else if (params.authorName === "Edward Thomas") {
    authorName = "Edward Thomas (poet)";
  } else if (params.authorName === "James Thomson") {
    authorName = "James Thomson (poet, born 1700)";
  } else if (params.authorName === "Jane Taylor") {
    authorName = "Jane Taylor (poet)";
  } else if (params.authorName === "Major Henry Livingston, Jr.") {
    authorName = "Henry Livingston Jr.";
  } else if (params.authorName === "Oliver Wendell Holmes") {
    authorName = "Oliver Wendell Holmes Sr.";
  } else if (params.authorName === "Richard Lovelace") {
    authorName = "Richard Lovelace (poet)";
  } else if (params.authorName === "Robert Herrick") {
    authorName = "Robert Herrick (poet)";
  } else if (params.authorName === "Robinson") {
    authorName = "Edwin Arlington Robinson";
  } else if (params.authorName === "Sir John Suckling") {
    authorName = "John Suckling (poet)";
  } else if (params.authorName === "Thomas Campbell") {
    authorName = "Thomas Campbell (poet)";
  } else if (params.authorName === "William Browne") {
    authorName = "William Browne (poet)";
  } else {
    authorName = params.authorName;
  }

  let authorResponse = await fetch(
    `https://en.wikipedia.org/api/rest_v1/page/summary/${authorName}`,
    {
      method: "GET",
    }
  );
  let authorData = await authorResponse.json();

  let authorPoems = await fetch(
    `https://poetrydb.org/author/${params.authorName}`,
    {
      method: "GET",
    }
  );
  let authorPoemsData = await authorPoems.json();

  console.log(authorName);

  return {
    props: {
      data: authorData,
      poems: authorPoemsData,
      authorName: params.authorName,
    },
  };
};

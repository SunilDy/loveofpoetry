import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import axios from "axios";
import LineBreak from "@/public/linebreak.svg";
import { Alegreya } from "@next/font/google";
import PlaceHolder from "@/public/placeholder/ph2.png";

const alegreya = Alegreya({ subsets: ["latin"] });

export default function Home({ data, poems, authorName }: any) {
  return (
    <>
      <Head>
        <title>{authorName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div
          className={`
            xsm:w-[90%] md:w-[80%] lg:w-[70%] xl:w-[60%] 
            mx-auto flex flex-col items-center mb-32 z-30 rounded-xl text-white
            xsm:mt-10 md-16 lg:mt-24 h-auto
            `}
        >
          {/* Author name and Linebreak ======= */}
          <h1
            className={`${alegreya.className} font-bold mt-8 mb-2
              xsm:text-[2em] md:text-[3em] lg:text-[4em]
              `}
          >
            {authorName}
          </h1>
          <Image
            className="w-40 mb-10"
            src={LineBreak}
            alt={"linebreak"}
            height={300}
            width={300}
          />
          {/* Author name and Linebreak ======= */}

          <div
            className={`bg-rose-100 border-2 border-slate-100 border-opacity-40 bg-opacity-20 z-30 rounded-xl shadow-2xl w-full
            md:flex items-center h-auto p-10
        `}
          >
            {/* Author Image */}
            <div className="m-10 flex justify-center">
              {data.originalimage ? (
                <div className="grid grid-cols-1 grid-rows-1">
                  <div className="z-40 col-span-full row-span-full border-2 border-white border-opacity-40 rounded-xl xsm:w-40 sm:w-60 md:w-40 h-full"></div>
                  <Image
                    src={data.originalimage.source}
                    alt={data.title}
                    height={800}
                    width={800}
                    className={`z-50 xsm:w-40 sm:w-60 md:w-40 rounded-xl col-span-full row-span-full 
                    hover:translate-x-0 hover:translate-y-0 -translate-x-5 -translate-y-5
                    transition-transform
                    `}
                  />
                </div>
              ) : (
                <div className="grid grid-cols-1 grid-rows-1">
                  <div className="z-40 col-span-full row-span-full border-2 border-white border-opacity-40 rounded-xl xsm:w-40 sm:w-60 md:w-40 h-full"></div>
                  <Image
                    src={PlaceHolder}
                    alt={data.title}
                    height={800}
                    width={800}
                    className={`z-50 xsm:w-40 sm:w-60 md:w-40 rounded-xl col-span-full row-span-full 
                    hover:translate-x-0 hover:translate-y-0 -translate-x-5 -translate-y-5
                    transition-transform
                    `}
                  />
                </div>
              )}
            </div>
            {/* Author Image =======*/}
            {/* Author Details */}
            <div className="flex-1">
              <p className="italic mb-4 font-semibold">{data.description}</p>
              <p
                className={`${alegreya.className} 
                xsm:text-md md:text-lg lg:text-xl 
                mb-1`}
              >
                {data.extract}
              </p>
            </div>
            {/* Author Details ======*/}
          </div>
          {/* Poems */}
          <div className="mt-10 self-start">
            <h1 className="text-xl font-bold underline underline-offset-4 mb-4">
              Poems By The Author
            </h1>
            {poems.map((poem: any, i: number) => (
              <Link href={`${authorName}/${poem.title}`} key={i}>
                <p className={`font-semibold`}>{poem.title}</p>
              </Link>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

// export const getStaticPaths = async () => {
//   let response = await fetch("https://poetrydb.org/author", {
//     method: "GET",
//   });
//   // let data = await response.json();
//   let data = await axios.get("https://poetrydb.org/author");

//   let pathNames = data.data.authors.map((author: any) => {
//     return {
//       params: {
//         authorName: author,
//       },
//     };
//   });

//   return {
//     paths: pathNames,
//     fallback: false,
//   };
// };

export const getServerSideProps = async (context: any) => {
  let { params } = context;

  let authorName = "";
  if (params.authorName === "Ann Taylor") {
    authorName = "Ann Taylor (poet)";
  } else if (params.authorName === "Edward Fitzgerald") {
    authorName = "Edward FitzGerald (poet)";
  } else if (params.authorName === "Edward Thomas") {
    authorName = "Edward Thomas (poet)";
  } else if (params.authorName === "James Thomson") {
    authorName = "James Thomson (poet, born 1700)";
  } else if (params.authorName === "Jane Taylor") {
    authorName = "Jane Taylor (poet)";
  } else if (params.authorName === "Major Henry Livingston, Jr.") {
    authorName = "Henry Livingston Jr.";
  } else if (params.authorName === "Oliver Wendell Holmes") {
    authorName = "Oliver Wendell Holmes Sr.";
  } else if (params.authorName === "Richard Lovelace") {
    authorName = "Richard Lovelace (poet)";
  } else if (params.authorName === "Robert Herrick") {
    authorName = "Robert Herrick (poet)";
  } else if (params.authorName === "Robinson") {
    authorName = "Edwin Arlington Robinson";
  } else if (params.authorName === "Sir John Suckling") {
    authorName = "John Suckling (poet)";
  } else if (params.authorName === "Thomas Campbell") {
    authorName = "Thomas Campbell (poet)";
  } else if (params.authorName === "William Browne") {
    authorName = "William Browne (poet)";
  } else if (params.authorName === "Charlotte Smith") {
    authorName = "Charlotte Smith (writer)";
  } else {
    authorName = params.authorName;
  }

  let authorData = await axios.get(
    `https://en.wikipedia.org/api/rest_v1/page/summary/${authorName}`
  );
  let authorPoemsData = await axios.get(
    `https://poetrydb.org/author/${params.authorName}`
  );

  return {
    props: {
      data: authorData.data,
      poems: authorPoemsData.data,
      authorName: params.authorName,
    },
  };
};
